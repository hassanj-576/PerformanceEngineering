The folder contains three  subfolder

model:
The model folder contains the logistic regression model. The model and the training data is provided. All you have to do is to run logistic.py to run the model. The model uses the following libraries
numpy
pylab
sklearn
pandas


The model accepts two parameters, the value of N and k, to run it use the following example
python logistic.py 10000 10
The model first creates the plot, it then trains on the training set, and then runs the cross validation on the test set and outputs the percentage of values it got right. It then predcits which 
algorithm the user should use for the given value of N and k

The file also contains the linear.py 
This is the linear regression model, it uses the same libraries and the same input command line parameters. It reads the input data, splits it into two for the two algorithms. It then trains on 
the training set for each algorithm and 
then tests on the cross validation set for each algorithm and prints the mean error in seconds for both the sets. It then predicts for the given value of N and k, what are the times for 
selection and custom Algorithms.




NearestNeighbor:
This folder contains the code for nearest neighbor. We have procvided a make file that compiles all the versions of our code. The makefile has been tested on DAS 4.
The binaries takes 3 input command line parameters
N - total Number of nodes
Filename - input file name
k - number of nearest neighbors. 
Make sure the file has N number of nodes or the code will return and error and exit gracefully.
For example, to run the naive using a input file 100.txt that has 100 nodes use the following command
./naive 100 100.txt 10

We have also provided a python file to generate data files. It takes two arguments
output file name
number of nodes

So to generate a file with 100 points named 100.txt, run the following command
python datagenerator.py 100.txt 100

CUDA: 
This folder contains the CUDA code. This can also be made using the provided makaefile. We have also included the corresponding libraries used. This also takes the same command line arguments as other implementations of Nearest Neighbor
